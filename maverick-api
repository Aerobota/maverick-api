#!/usr/bin/env python

'''
Tornado server for maverick-api
Samuel Dudley
Feb 2018
https://github.com/goodrobots/maverick-api
'''
VERSION = "v0.1"

# TODO: setup tests and flake8

# std lib imports
import __future__
import logging
import os, json, sys, select, signal, threading
import time
from uuid import uuid4 # used to generate unique IDs

# tornado imports
import tornado.web

# tornadoql imports
from tornadoql.graphql_handler import GQLHandler
from tornadoql.subscription_handler import GQLSubscriptionHandler

# schema imports
from api.schema import schema
from api.schema import UpdateStateMessage

# ROS imports
import rospy
import mavros
import mavros.utils
from std_msgs.msg import String
from sensor_msgs.msg import Imu, NavSatFix
from mavros_msgs.msg import State

# zeroconf placeholder
# from zeroconf import ServiceInfo, Zeroconf # advertise available websockets to browser

APP_ROOT = os.path.dirname(os.path.abspath(__file__))
APP_STATIC = os.path.join(APP_ROOT, 'static')
# TODO: group the settings and make configurable
SETTINGS = {
    'static_path': APP_STATIC,
    'sockets': [],
    'subscriptions': {}
}

# Taken from https://github.com/IlyaRadinsky/tornadoql under MIT license
class GraphQLHandler(GQLHandler):
    @property
    def schema(self):
        return TornadoQL.schema
    
# Taken from https://github.com/IlyaRadinsky/tornadoql under MIT license
class GraphQLSubscriptionHandler(GQLSubscriptionHandler):

    def initialize(self, opts):
        super(GraphQLSubscriptionHandler, self).initialize()
        self.opts = opts

    @property
    def schema(self):
        return TornadoQL.schema

    @property
    def sockets(self):
        return self.opts['sockets']

    @property
    def subscriptions(self):
        return self.opts['subscriptions'].get(self, {})

    @subscriptions.setter
    def subscriptions(self, subscriptions):
        self.opts['subscriptions'][self] = subscriptions
        
# Taken from https://github.com/IlyaRadinsky/tornadoql under MIT license
class GraphiQLHandler(tornado.web.RequestHandler):
    def get(self):
        self.render(os.path.join(APP_STATIC, 'graphiql.html'))

# Adapted from https://github.com/IlyaRadinsky/tornadoql under MIT license
class TornadoQL(tornado.web.Application):
    def __init__(self, config):
        # TODO: roll settings into config
        args = dict(opts=SETTINGS)
        handlers = [
            (r'/subscriptions', GraphQLSubscriptionHandler, args),
            (r'/graphql', GraphQLHandler),
            (r'/graphiql', GraphiQLHandler)
        ]
        
        settings = dict(
            cookie_secret = config['APP_SECRET_KEY'],
            static_path = APP_STATIC,
            xsrf_cookies = False,
        )
        TornadoQL.schema = schema
        super(TornadoQL, self).__init__(handlers, **settings)

def start_app(config):
    logging.getLogger("tornado").setLevel(logging.WARNING)
    application = TornadoQL(config)
    server = tornado.httpserver.HTTPServer(application)
    server.listen(port = int(config['SERVER_PORT']), address = str(config['SERVER_INTERFACE']))
    if config['APP_DEBUG']:
        print("Starting Maverick-API server: {0}:{1}/{2}".format(config['SERVER_INTERFACE'], config['SERVER_PORT'], config['APP_PREFIX']))
    return server

def stop_tornado(config):
    # TODO: close all websocket connections (required?)
    ioloop = tornado.ioloop.IOLoop.current()
    ioloop.add_callback(ioloop.stop)
    if config['APP_DEBUG']:
        print("Asked Tornado to exit")

def main(config):
    server = start_app(config=config)
    tornado.ioloop.IOLoop.current().start()
    if config['APP_DEBUG']:
        print("Tornado finished")
    server.stop()
    
     
class Server(object):
    def __init__(self, optsargs):
        self.exit = False
        (self.opts, self.args) = optsargs
        self.server_thread = None
        # TODO: fix this config mess... 
        self.config = Configuration(self.opts.configuration)
        self.config = self.config.get_config()
        signal.signal(signal.SIGINT, self.exit_gracefully)
        signal.signal(signal.SIGTERM, self.exit_gracefully)
        
        self.server_thread = threading.Thread(target=main, args = (self.config,))
        self.server_thread.daemon = True
        self.server_thread.start()
        self.main_loop()

    def main_loop(self):
        '''main loop of the api server'''
        # setup the connection to ROS
        self.connection = Connection()
        while not self.exit:
            time.sleep(0.1)
        print('Server finished')
        
    def process_connection_in(self):
        '''process data connection(s)'''
        pass
        
    def exit_gracefully(self, signum, frame):
        '''called on sigterm'''
        self.exit = True
        if self.server_thread:
            # attempt to shutdown the tornado server
            stop_tornado(self.config)
            self.server_thread.join(timeout=10)
            
class Connection(object):
    def __init__(self):
        self.connect()
        self.topics()
        self.listener()
        
    def statecallback(self, data):
        rospy.loginfo("=====================\n" + rospy.get_caller_id() + "\n%s\n\n", data)
        
    def connect(self):
        # In ROS, nodes are uniquely named. If two nodes with the same
        # node are launched, the previous one is kicked off. The
        # anonymous=True flag means that rospy will choose a unique
        # name for our 'listener' node so that multiple listeners can
        # run simultaneously.
        rospy.init_node('listener', anonymous=True)
    
    def listener(self):
        rospy.Subscriber("mavros/state", State, self.state_callback)
        #rospy.Subscriber("mavros/global_position/global", NavSatFix, self.callback)
    
    def topics(self):
        topics = rospy.get_published_topics()
        for topic in topics:
            print(topic)
    
    def state_callback(self, data):
        kwargs = {'seq':data.header.seq,'frame_id':data.header.frame_id,'guided':data.guided,
               'nsecs':data.header.stamp.nsecs,'system_status':data.system_status,'secs':data.header.stamp.secs,
               'connected':data.connected,'mode':data.mode,'armed':data.armed}
        res = UpdateStateMessage().mutate(**kwargs)
        
if __name__ == '__main__':
    from optparse import OptionParser
    from config import Configuration
    parser = OptionParser('maverick-api [options]')
    
    parser.add_option("--configuration", dest="configuration", type='str',
                      help="configuration file name", default="config.json")
    optsargs = parser.parse_args()
    (opts,args) = optsargs
    
    Server(optsargs)